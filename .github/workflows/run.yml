# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: arXiv-daily-ai-enhanced

on:
  schedule:
    - cron: "30 16 * * *"  # 每天 UTC 16:30 执行，相当于北京时间 00:30
  workflow_dispatch:


jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Install dependencies
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        uv sync
    - name: Run script
      run: |
        source .venv/bin/activate
        export OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
        export OPENAI_BASE_URL=${{ secrets.OPENAI_BASE_URL }}
        export LANGUAGE="${{ vars.LANGUAGE }}"
        export CATEGORIES="${{ vars.CATEGORIES }}"
        export MODEL_NAME="${{ vars.MODEL_NAME }}"
        bash run.sh
    - name: commit
      run: |
        git config --global user.email "${{ vars.EMAIL }}"
        git config --global user.name "${{ vars.NAME }}"
        git add .
        # 检查是否有变更需要提交
        if git diff --staged --quiet; then
          echo "No changes to commit"
          exit 0
        fi
        git commit -m "update"
    - name: Pull latest changes and push
      run: |
        # 设置Git配置以处理自动合并
        git config pull.rebase true
        git config rebase.autoStash true
        
        # 尝试推送，如果失败则拉取并重试
        for i in {1..3}; do
          echo "Push attempt $i"
          if git push origin main; then
            echo "Push successful"
            break
          else
            echo "Push failed, pulling latest changes..."
            git pull origin main --no-edit || true
            if [ $i -eq 3 ]; then
              echo "Failed to push after 3 attempts"
              exit 1
            fi
          fi
        done
    - name: Check Email Configuration
      run: |
        if [ -z "${{ vars.NOTIFICATION_EMAIL }}" ]; then
          echo "⚠️ Email notification is not configured. Skipping email sending."
          echo "To enable email notifications, please set NOTIFICATION_EMAIL variable and SMTP secrets."
        else
          echo "✅ Email notification is configured for: ${{ vars.NOTIFICATION_EMAIL }}"
        fi
    - name: Set Date Environment Variable
      if: success() && vars.NOTIFICATION_EMAIL != ''
      continue-on-error: true
      run: echo "TODAY=$(date -u '+%Y-%m-%d')" >> $GITHUB_ENV
    - name: Prepare Email Template
      if: success() && vars.NOTIFICATION_EMAIL != ''
      continue-on-error: true
      run: |
        # 根据LANGUAGE变量选择模板文件
        LANGUAGE_LOWER=$(echo "${{ vars.LANGUAGE }}" | tr '[:upper:]' '[:lower:]')
        if [[ "$LANGUAGE_LOWER" == *"chinese"* ]] || [[ "$LANGUAGE_LOWER" == *"中文"* ]] || [[ "${{ vars.LANGUAGE }}" == "cn" ]]; then
          TEMPLATE_FILE=".github/templates/email-notification-cn.html"
          echo "📧 使用中文邮件模板"
          # 计算北京时间 (UTC+8)
          BEIJING_TIME=$(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S')
          TIME_TO_REPLACE="$BEIJING_TIME"
        else
          TEMPLATE_FILE=".github/templates/email-notification-en.html"
          echo "📧 Using English email template"
          TIME_TO_REPLACE="${{ github.run_started_at }}"
        fi
        
        # 复制选定的模板文件
        cp "$TEMPLATE_FILE" email_template.html
        
        # 使用sed进行变量替换
        sed -i "s/{{TODAY}}/${{ env.TODAY }}/g" email_template.html
        sed -i "s/{{RUN_STARTED_AT}}/${{ github.run_started_at }}/g" email_template.html
        sed -i "s/{{BEIJING_TIME}}/${TIME_TO_REPLACE}/g" email_template.html
        sed -i "s/{{RUN_NUMBER}}/${{ github.run_number }}/g" email_template.html
        sed -i "s/{{CATEGORIES}}/${{ vars.CATEGORIES }}/g" email_template.html
        sed -i "s/{{MODEL_NAME}}/${{ vars.MODEL_NAME }}/g" email_template.html
        sed -i "s/{{LANGUAGE}}/${{ vars.LANGUAGE }}/g" email_template.html
        sed -i "s/{{REPOSITORY}}/${{ github.repository }}/g" email_template.html
        sed -i "s/{{RUN_ID}}/${{ github.run_id }}/g" email_template.html
        sed -i "s/{{REF_NAME}}/${{ github.ref_name }}/g" email_template.html
        sed -i "s/{{ACTOR}}/${{ github.actor }}/g" email_template.html
        sed -i "s/{{EVENT_NAME}}/${{ github.event_name }}/g" email_template.html
        
        echo "✅ 邮件模板准备完成"
    - name: Send Email Notification
      if: success() && vars.NOTIFICATION_EMAIL != ''
      continue-on-error: true
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: ${{ secrets.SMTP_SERVER }}
        server_port: ${{ secrets.SMTP_PORT }}
        username: ${{ secrets.SMTP_USERNAME }}
        password: ${{ secrets.SMTP_PASSWORD }}
        subject: "📚 Daily arXiv AI Enhanced ${{ env.TODAY }}"
        to: ${{ vars.NOTIFICATION_EMAIL }}
        from: ${{ secrets.SMTP_USERNAME }}
        html_body: file://email_template.html
